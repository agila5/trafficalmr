% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/tc_recode.R
\name{tc_recode}
\alias{tc_recode}
\alias{tc_recode_vehicle_type}
\title{Recode character strings based on regular expressions}
\usage{
tc_recode(x, pattern)

tc_recode_vehicle_type(
  x,
  pattern = c(`Taxi*.+` = "Taxi", `Van*.+` = "Van", `Pedal cycle` = "Bicycle",
    `(M|m)otorcycle*.+|Elec*.+` = "Motorcycle",
    `Data*.+|Other*.+|Agri*.+|Ridden*.+|Mobility*.+|Tram*.+` = "Other", `Bus*.+` = "Bus",
    `Minibus*.+` = "Minibus", `Goods*.+` = "HGV")
)
}
\arguments{
\item{x}{Character string to recode}

\item{pattern}{A named character vector with values representing new values.
Has the form \code{c("Car long name" = "Car", "Taxi/Private hire car" = "Taxi")}.
\verb{Car long name} will be converted into \code{Car} in this case.

for details.}
}
\description{
This function takes a character string and recodes it.
Default recoding functions are available in functions such as
\code{tc_recode_vehicle_type()} and \code{tc_recode_casualties}.
}
\details{
It is based on the function \code{\link[stringr:str_replace]{stringr::str_replace_all()}}.
}
\examples{
x = c("car long name", "bus", "a bike long")
tc_recode(x, pattern = c("car*.+" = "car", "*.+bike*.+"))
\dontrun{
v = stats19::get_stats19(2018, "vehicles")
v$vehicle_type_simple = tc_recode_vehicle_type(v$vehicle_type)
table(v$vehicle_type)
table(v$vehicle_type_simple)
}
(x = stats19::vehicles_sample$vehicle_type)
tc_recode_vehicle_type(x)
}
